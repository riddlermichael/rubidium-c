#pragma once

#include <errno.h>

#include <rbc/core/attributes.h>
#include <rbc/core/export.h>
#include <rbc/core/extern.h>
#include <rbc/core/types.h>

/// @see https://learn.microsoft.com/en-us/cpp/c-runtime-library/errno-constants?view=msvc-170
enum rbc_error {
	RBC_ERROR_OK = 0,
	// our error codes; all must be negative
	RBC_ERROR_UNKNOWN = -1,
	RBC_ERROR_NOT_IMPLEMENTED = -2,
	// _portable_ POSIX errors
	RBC_ERROR_ADDRESS_FAMILY_NOT_SUPPORTED = EAFNOSUPPORT,
	RBC_ERROR_ADDRESS_IN_USE = EADDRINUSE,
	RBC_ERROR_ADDRESS_NOT_AVAILABLE = EADDRNOTAVAIL,
	RBC_ERROR_ALREADY_CONNECTED = EISCONN,
	RBC_ERROR_ARGUMENT_LIST_TOO_LONG = E2BIG,
	RBC_ERROR_ARGUMENT_OUT_OF_DOMAIN = EDOM,
	RBC_ERROR_BAD_ADDRESS = EFAULT,
	RBC_ERROR_BAD_FILE_DESCRIPTOR = EBADF,
	RBC_ERROR_BAD_MESSAGE = EBADMSG,
	RBC_ERROR_BROKEN_PIPE = EPIPE,
	RBC_ERROR_CONNECTION_ABORTED = ECONNABORTED,
	RBC_ERROR_CONNECTION_ALREADY_IN_PROGRESS = EALREADY,
	RBC_ERROR_CONNECTION_REFUSED = ECONNREFUSED,
	RBC_ERROR_CONNECTION_RESET = ECONNRESET,
	RBC_ERROR_CROSS_DEVICE_LINK = EXDEV,
	RBC_ERROR_DESTINATION_ADDRESS_REQUIRED = EDESTADDRREQ,
	RBC_ERROR_DEVICE_OR_RESOURCE_BUSY = EBUSY,
	RBC_ERROR_DIRECTORY_NOT_EMPTY = ENOTEMPTY,
	RBC_ERROR_EXECUTABLE_FORMAT_ERROR = ENOEXEC,
	RBC_ERROR_FILE_EXISTS = EEXIST,
	RBC_ERROR_FILE_TOO_LARGE = EFBIG,
	RBC_ERROR_FILENAME_TOO_LONG = ENAMETOOLONG,
	RBC_ERROR_FUNCTION_NOT_SUPPORTED = ENOSYS,
	RBC_ERROR_HOST_UNREACHABLE = EHOSTUNREACH,
	RBC_ERROR_IDENTIFIER_REMOVED = EIDRM,
	RBC_ERROR_ILLEGAL_BYTE_SEQUENCE = EILSEQ,
	RBC_ERROR_INAPPROPRIATE_IO_CONTROL_OPERATION = ENOTTY,
	RBC_ERROR_INTERRUPTED = EINTR,
	RBC_ERROR_INVALID_ARGUMENT = EINVAL,
	RBC_ERROR_INVALID_SEEK = ESPIPE,
	RBC_ERROR_IO_ERROR = EIO,
	RBC_ERROR_IS_A_DIRECTORY = EISDIR,
	RBC_ERROR_MESSAGE_SIZE = EMSGSIZE,
	RBC_ERROR_NETWORK_DOWN = ENETDOWN,
	RBC_ERROR_NETWORK_RESET = ENETRESET,
	RBC_ERROR_NETWORK_UNREACHABLE = ENETUNREACH,
	RBC_ERROR_NO_BUFFER_SPACE = ENOBUFS,
	RBC_ERROR_NO_CHILD_PROCESS = ECHILD,
	RBC_ERROR_NO_LINK = ENOLINK,
	RBC_ERROR_NO_LOCK_AVAILABLE = ENOLCK,
	RBC_ERROR_NO_MESSAGE_AVAILABLE = ENODATA,
	RBC_ERROR_NO_MESSAGE = ENOMSG,
	RBC_ERROR_NO_PROTOCOL_OPTION = ENOPROTOOPT,
	RBC_ERROR_NO_SPACE_ON_DEVICE = ENOSPC,
	RBC_ERROR_NO_STREAM_RESOURCES = ENOSR,
	RBC_ERROR_NO_SUCH_DEVICE_OR_ADDRESS = ENXIO,
	RBC_ERROR_NO_SUCH_DEVICE = ENODEV,
	RBC_ERROR_NO_SUCH_FILE_OR_DIRECTORY = ENOENT,
	RBC_ERROR_NO_SUCH_PROCESS = ESRCH,
	RBC_ERROR_NOT_A_DIRECTORY = ENOTDIR,
	RBC_ERROR_NOT_A_SOCKET = ENOTSOCK,
	RBC_ERROR_NOT_A_STREAM = ENOSTR,
	RBC_ERROR_NOT_CONNECTED = ENOTCONN,
	RBC_ERROR_NOT_ENOUGH_MEMORY = ENOMEM,
	RBC_ERROR_NOT_SUPPORTED = ENOTSUP,
	RBC_ERROR_OPERATION_CANCELED = ECANCELED,
	RBC_ERROR_OPERATION_IN_PROGRESS = EINPROGRESS,
	RBC_ERROR_OPERATION_NOT_PERMITTED = EPERM,
	RBC_ERROR_OPERATION_NOT_SUPPORTED = EOPNOTSUPP,
	RBC_ERROR_OPERATION_WOULD_BLOCK = EWOULDBLOCK,
	RBC_ERROR_OWNER_DEAD = EOWNERDEAD,
	RBC_ERROR_PERMISSION_DENIED = EACCES,
	RBC_ERROR_PROTOCOL_ERROR = EPROTO,
	RBC_ERROR_PROTOCOL_NOT_SUPPORTED = EPROTONOSUPPORT,
	RBC_ERROR_READ_ONLY_FILE_SYSTEM = EROFS,
	RBC_ERROR_RESOURCE_DEADLOCK_WOULD_OCCUR = EDEADLK,
	RBC_ERROR_RESOURCE_UNAVAILABLE_TRY_AGAIN = EAGAIN,
	RBC_ERROR_RESULT_OUT_OF_RANGE = ERANGE,
	RBC_ERROR_STATE_NOT_RECOVERABLE = ENOTRECOVERABLE,
	RBC_ERROR_STREAM_TIMEOUT = ETIME,
	RBC_ERROR_TEXT_FILE_BUSY = ETXTBSY,
	RBC_ERROR_TIMED_OUT = ETIMEDOUT,
	RBC_ERROR_TOO_MANY_FILES_OPEN_IN_SYSTEM = ENFILE,
	RBC_ERROR_TOO_MANY_FILES_OPEN = EMFILE,
	RBC_ERROR_TOO_MANY_LINKS = EMLINK,
	RBC_ERROR_TOO_MANY_SYMBOLIC_LINK_LEVELS = ELOOP,
	RBC_ERROR_VALUE_TOO_LARGE = EOVERFLOW,
	RBC_ERROR_WRONG_PROTOCOL_TYPE = EPROTOTYPE,
	// for internal use only
	RBC_ERROR_MIN = RBC_ERROR_NOT_IMPLEMENTED,
	RBC_ERROR_MAX = RBC_ERROR_STATE_NOT_RECOVERABLE,
};

typedef enum rbc_error rbc_error;

/// System error code.
typedef unsigned rbc_error_code;

RBC_BEGIN_EXTERN_C

RBC_EXPORT rbc_error_code rbc_get_last_error(void);

RBC_EXPORT rbc_error rbc_error_from_error_code(rbc_error_code code);

RBC_EXPORT rbc_error rbc_error_from_last_error(void);

/**
 * Returns a pointer to the textual description of the error code @p error.
 * The contents of the string are *locale-independent*.
 * @return pointer to a null-terminated byte string corresponding to the @p error if @p error is valid error code;
 * `NULL` otherwise.
 */
RBC_EXPORT RBC_CONST char const* rbc_error_to_string(rbc_error error);

/**
 * Same as rbc_error_to_string, except that the message is copied into user-provided storage @p buf.
 * No more than <tt>size - 1</tt> bytes are written, the buffer is always null-terminated.
 * If the message had to be truncated to fit the buffer and @p size is greater than `3`,
 * then only <tt>size - 4</tt> bytes are written, and the characters "..." are appended before the null terminator.
 * @param buf   pointer to a user-provided buffer
 * @param size  size of the user-provided buffer
 * @param error error code
 * @return `true` if the entire message was successfully stored in @p buf, `false` otherwise.
 */
RBC_EXPORT bool rbc_error_to_string_s(char* buf, usize size, rbc_error error);

RBC_END_EXTERN_C
